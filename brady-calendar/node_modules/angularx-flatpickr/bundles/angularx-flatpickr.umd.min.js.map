{"version":3,"sources":["ng://angularx-flatpickr/flatpickr-defaults.service.ts","ng://angularx-flatpickr/flatpickr.directive.ts","null","ng://angularx-flatpickr/flatpickr.module.ts"],"names":["FlatpickrDefaults","undefined","Date","Injectable","FLATPICKR_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","FlatpickrDirective","multi","elm","defaults","renderer","this","EventEmitter","prototype","ngAfterViewInit","_this","options","altFormat","altInput","altInputClass","allowInput","appendTo","ariaDateFormat","clickOpens","dateFormat","defaultHour","defaultMinute","disable","disableMobile","enable","enableTime","enableSeconds","formatDate","hourIncrement","defaultDate","initialValue","inline","maxDate","minDate","minuteIncrement","mode","nextArrow","noCalendar","now","parseDate","prevArrow","shorthandCurrentMonth","static","time24hr","weekNumbers","getWeek","wrap","plugins","onChange","selectedDates","dateString","instance","flatpickrChange","emit","onOpen","flatpickrOpen","onClose","flatpickrClose","onMonthChange","flatpickrMonthChange","onYearChange","flatpickrYearChange","onReady","flatpickrReady","onValueUpdate","flatpickrValueUpdate","onDayCreate","dayElement","flatpickrDayCreate","locale","Object","keys","forEach","key","time_24hr","flatpickr","nativeElement","setDisabledState","isDisabled","ngOnChanges","changes","inputKey","set","ngOnDestroy","destroy","writeValue","value","convertedValue","convertModelValue","from","to","setDate","registerOnChange","fn","onChangeFn","registerOnTouched","onTouchedFn","setProperty","_input","removeAttribute","inputChanged","dates","split","map","str","config","_a","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","error","__read","Directive","args","selector","providers","host","(blur)","ElementRef","Renderer2","Input","Output","HostListener","USER_DEFAULTS","InjectionToken","defaultsFactory","userDefaults","assign","FlatpickrModule","forRoot","ngModule","useValue","useFactory","deps","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport type DisableEnableDate =\n  | string\n  | Date\n  | { from: Date | string; to: Date | string }\n  | ((date: Date) => boolean);\n\n// tslint:disable no-inferrable-types\n\nexport interface FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat?: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput?: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass?: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput?: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo?: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens?: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat?: string;\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable?: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile?: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable?: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime?: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds?: boolean;\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string;\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement?: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline?: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate?: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate?: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement?: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode?: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow?: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar?: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate?: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow?: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth?: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static?: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr?: boolean;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc?: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers?: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek?: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap?: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins?: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale?: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue?: boolean;\n}\n\n@Injectable()\nexport class FlatpickrDefaults implements FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat: string = 'F j, Y';\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput: boolean = false;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass: string = '';\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput: boolean = false;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo: HTMLElement = undefined;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string = 'F j, Y';\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens: boolean = true;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat: string = 'Y-m-d';\n\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number = 12;\n\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number = 0;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable: DisableEnableDate[] = [];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile: boolean = false;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable: DisableEnableDate[] = [];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime: boolean = false;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds: boolean = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string = undefined;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement: number = 1;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline: boolean = false;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate: string | Date = undefined;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate: string | Date = undefined;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement: number = 5;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode: 'single' | 'multiple' | 'range' = 'single';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow: string = '>';\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar: boolean = false;\n\n  /**\n   * Default now to the current date\n   */\n  now: Date | string | number = new Date();\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow: string = '<';\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth: boolean = false;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static: boolean = false;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr: boolean = false;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc: boolean = false;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers: boolean = false;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap: boolean = false;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins: any[] = [];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue: boolean = false;\n}\n","import {\n  Directive,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  forwardRef,\n  HostListener,\n  Renderer2\n} from '@angular/core';\nimport {\n  FlatpickrDefaults,\n  DisableEnableDate\n} from './flatpickr-defaults.service';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n\nexport interface FlatPickrOutputOptions {\n  selectedDates: Date[];\n  dateString: string;\n  instance: any;\n}\n\nexport interface FlatPickrDayCreateOutputOptions\n  extends FlatPickrOutputOptions {\n  dayElement: HTMLElement;\n}\n\nexport const FLATPICKR_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => FlatpickrDirective), //tslint:disable-line\n  multi: true\n};\n\n@Directive({\n  selector: '[mwlFlatpickr]',\n  providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n  host: {\n    // tslint:disable-line use-host-property-decorator\n    '(blur)': 'onTouchedFn()'\n  }\n})\nexport class FlatpickrDirective\n  implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  @Input() altFormat: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  @Input() altInput: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  @Input() altInputClass: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  @Input() allowInput: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  @Input() appendTo: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  @Input() ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  @Input() clickOpens: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  @Input() dateFormat: string;\n\n  /**\n   * Initial value of the hour element.\n   */\n  @Input() defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  @Input() defaultMinute?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  @Input() disable: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  @Input() disableMobile: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  @Input() enable: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  @Input() enableTime: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  @Input() enableSeconds: boolean;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  @Input() formatDate?: (value: any) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  @Input() hourIncrement: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  @Input() inline: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  @Input() maxDate: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Input() minDate: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  @Input() minuteIncrement: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  @Input() mode: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  @Input() nextArrow: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  @Input() noCalendar: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  @Input() now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  @Input() parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  @Input() prevArrow: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  @Input() shorthandCurrentMonth: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  @Input() static: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  @Input() time24hr: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  @Input() weekNumbers: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  @Input() getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  @Input() wrap: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  @Input() plugins: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  @Input() locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  @Input() convertModelValue: boolean;\n\n  /**\n   * Gets triggered once the calendar is in a ready state\n   */\n  @Output()\n  flatpickrReady: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the user selects a date, or changes the time on a selected date.\n   */\n  @Output()\n  flatpickrChange: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the input value is updated with a new date string.\n   */\n  @Output()\n  flatpickrValueUpdate: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is opened.\n   */\n  @Output()\n  flatpickrOpen: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is closed.\n   */\n  @Output()\n  flatpickrClose: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the month is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrMonthChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the year is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrYearChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Take full control of every date cell with this output\n   */\n  @Output()\n  flatpickrDayCreate: EventEmitter<\n    FlatPickrDayCreateOutputOptions\n  > = new EventEmitter();\n\n  private instance: flatpickr.Instance;\n  private isDisabled = false;\n  private initialValue: any;\n\n  onChangeFn: (value: any) => void = () => {}; // tslint:disable-line\n\n  onTouchedFn = () => {};\n\n  constructor(\n    private elm: ElementRef,\n    private defaults: FlatpickrDefaults,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: any = {\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      allowInput: this.allowInput,\n      appendTo: this.appendTo,\n      ariaDateFormat: this.ariaDateFormat,\n      clickOpens: this.clickOpens,\n      dateFormat: this.dateFormat,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableTime: this.enableTime,\n      enableSeconds: this.enableSeconds,\n      formatDate: this.formatDate,\n      hourIncrement: this.hourIncrement,\n      defaultDate: this.initialValue,\n      inline: this.inline,\n      maxDate: this.maxDate,\n      minDate: this.minDate,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      nextArrow: this.nextArrow,\n      noCalendar: this.noCalendar,\n      now: this.now,\n      parseDate: this.parseDate,\n      prevArrow: this.prevArrow,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      static: this.static,\n      time24hr: this.time24hr,\n      weekNumbers: this.weekNumbers,\n      getWeek: this.getWeek,\n      wrap: this.wrap,\n      plugins: this.plugins,\n      onChange: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrChange.emit({ selectedDates, dateString, instance });\n      },\n      onOpen: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrOpen.emit({ selectedDates, dateString, instance });\n      },\n      onClose: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrClose.emit({ selectedDates, dateString, instance });\n      },\n      onMonthChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });\n      },\n      onYearChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrYearChange.emit({ selectedDates, dateString, instance });\n      },\n      onReady: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrReady.emit({ selectedDates, dateString, instance });\n      },\n      onValueUpdate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });\n      },\n      onDayCreate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any,\n        dayElement: HTMLElement\n      ) => {\n        this.flatpickrDayCreate.emit({\n          selectedDates,\n          dateString,\n          instance,\n          dayElement\n        });\n      }\n    };\n    if (this.locale) {\n      // workaround warning from flatpickr\n      options.locale = this.locale;\n    }\n    Object.keys(options).forEach(key => {\n      if (typeof options[key] === 'undefined') {\n        options[key] = (this.defaults as any)[key];\n      }\n    });\n    options.time_24hr = options.time24hr;\n    this.instance = flatpickr(\n      this.elm.nativeElement,\n      options\n    ) as flatpickr.Instance;\n    this.setDisabledState(this.isDisabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance) {\n      Object.keys(changes).forEach(inputKey => {\n        this.instance.set(inputKey as any, (this as any)[inputKey]);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.instance.destroy();\n  }\n\n  writeValue(value: any): void {\n    let convertedValue: any = value;\n    if (this.convertModelValue && this.mode === 'range' && value) {\n      convertedValue = [value.from, value.to];\n    }\n\n    if (this.instance) {\n      this.instance.setDate(convertedValue);\n    } else {\n      // flatpickr hasn't been initialised yet, store the value for later use\n      this.initialValue = convertedValue;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouchedFn = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    if (this.instance) {\n      if (this.isDisabled) {\n        this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n      } else {\n        this.renderer.removeAttribute(this.instance._input, 'disabled');\n      }\n    }\n  }\n\n  @HostListener('input')\n  inputChanged(): void {\n    const value: string = this.elm.nativeElement.value;\n    if (this.convertModelValue && typeof value === 'string') {\n      switch (this.mode) {\n        case 'multiple':\n          const dates: Date[] = value\n            .split('; ')\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn(dates);\n          break;\n\n        case 'range':\n          const [from, to] = value\n            .split(this.instance.l10n.rangeSeparator)\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn({ from, to });\n          break;\n\n        case 'single':\n        default:\n          this.onChangeFn(\n            this.instance.parseDate(\n              value,\n              this.instance.config.dateFormat,\n              !this.instance.config.enableTime\n            )\n          );\n      }\n    } else {\n      this.onChangeFn(value);\n    }\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  NgModule,\n  ModuleWithProviders,\n  InjectionToken,\n  Provider\n} from '@angular/core';\nimport { FlatpickrDirective } from './flatpickr.directive';\nimport {\n  FlatpickrDefaults,\n  FlatpickrDefaultsInterface\n} from './flatpickr-defaults.service';\n\nexport const USER_DEFAULTS = new InjectionToken('flatpickr defaults');\n\nexport function defaultsFactory(\n  userDefaults: FlatpickrDefaultsInterface\n): FlatpickrDefaults {\n  const defaults: FlatpickrDefaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [FlatpickrDirective],\n  exports: [FlatpickrDirective]\n})\nexport class FlatpickrModule {\n  static forRoot(\n    userDefaults: FlatpickrDefaultsInterface = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: FlatpickrModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: FlatpickrDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n"]}