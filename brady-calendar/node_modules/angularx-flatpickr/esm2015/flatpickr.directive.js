/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter, forwardRef, HostListener, Renderer2 } from '@angular/core';
import { FlatpickrDefaults } from './flatpickr-defaults.service';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import flatpickr from 'flatpickr';
/**
 * @record
 */
export function FlatPickrOutputOptions() { }
function FlatPickrOutputOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    FlatPickrOutputOptions.prototype.selectedDates;
    /** @type {?} */
    FlatPickrOutputOptions.prototype.dateString;
    /** @type {?} */
    FlatPickrOutputOptions.prototype.instance;
}
/**
 * @record
 */
export function FlatPickrDayCreateOutputOptions() { }
function FlatPickrDayCreateOutputOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    FlatPickrDayCreateOutputOptions.prototype.dayElement;
}
export const /** @type {?} */ FLATPICKR_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => FlatpickrDirective),
    //tslint:disable-line
    multi: true
};
export class FlatpickrDirective {
    /**
     * @param {?} elm
     * @param {?} defaults
     * @param {?} renderer
     */
    constructor(elm, defaults, renderer) {
        this.elm = elm;
        this.defaults = defaults;
        this.renderer = renderer;
        /**
         * Gets triggered once the calendar is in a ready state
         */
        this.flatpickrReady = new EventEmitter();
        /**
         * Gets triggered when the user selects a date, or changes the time on a selected date.
         */
        this.flatpickrChange = new EventEmitter();
        /**
         * Gets triggered when the input value is updated with a new date string.
         */
        this.flatpickrValueUpdate = new EventEmitter();
        /**
         * Gets triggered when the calendar is opened.
         */
        this.flatpickrOpen = new EventEmitter();
        /**
         * Gets triggered when the calendar is closed.
         */
        this.flatpickrClose = new EventEmitter();
        /**
         * Gets triggered when the month is changed, either by the user or programmatically.
         */
        this.flatpickrMonthChange = new EventEmitter();
        /**
         * Gets triggered when the year is changed, either by the user or programmatically.
         */
        this.flatpickrYearChange = new EventEmitter();
        /**
         * Take full control of every date cell with this output
         */
        this.flatpickrDayCreate = new EventEmitter();
        this.isDisabled = false;
        this.onChangeFn = () => { };
        this.onTouchedFn = () => { };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ options = {
            altFormat: this.altFormat,
            altInput: this.altInput,
            altInputClass: this.altInputClass,
            allowInput: this.allowInput,
            appendTo: this.appendTo,
            ariaDateFormat: this.ariaDateFormat,
            clickOpens: this.clickOpens,
            dateFormat: this.dateFormat,
            defaultHour: this.defaultHour,
            defaultMinute: this.defaultMinute,
            disable: this.disable,
            disableMobile: this.disableMobile,
            enable: this.enable,
            enableTime: this.enableTime,
            enableSeconds: this.enableSeconds,
            formatDate: this.formatDate,
            hourIncrement: this.hourIncrement,
            defaultDate: this.initialValue,
            inline: this.inline,
            maxDate: this.maxDate,
            minDate: this.minDate,
            minuteIncrement: this.minuteIncrement,
            mode: this.mode,
            nextArrow: this.nextArrow,
            noCalendar: this.noCalendar,
            now: this.now,
            parseDate: this.parseDate,
            prevArrow: this.prevArrow,
            shorthandCurrentMonth: this.shorthandCurrentMonth,
            static: this.static,
            time24hr: this.time24hr,
            weekNumbers: this.weekNumbers,
            getWeek: this.getWeek,
            wrap: this.wrap,
            plugins: this.plugins,
            onChange: (selectedDates, dateString, instance) => {
                this.flatpickrChange.emit({ selectedDates, dateString, instance });
            },
            onOpen: (selectedDates, dateString, instance) => {
                this.flatpickrOpen.emit({ selectedDates, dateString, instance });
            },
            onClose: (selectedDates, dateString, instance) => {
                this.flatpickrClose.emit({ selectedDates, dateString, instance });
            },
            onMonthChange: (selectedDates, dateString, instance) => {
                this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });
            },
            onYearChange: (selectedDates, dateString, instance) => {
                this.flatpickrYearChange.emit({ selectedDates, dateString, instance });
            },
            onReady: (selectedDates, dateString, instance) => {
                this.flatpickrReady.emit({ selectedDates, dateString, instance });
            },
            onValueUpdate: (selectedDates, dateString, instance) => {
                this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });
            },
            onDayCreate: (selectedDates, dateString, instance, dayElement) => {
                this.flatpickrDayCreate.emit({
                    selectedDates,
                    dateString,
                    instance,
                    dayElement
                });
            }
        };
        if (this.locale) {
            // workaround warning from flatpickr
            options.locale = this.locale;
        }
        Object.keys(options).forEach(key => {
            if (typeof options[key] === 'undefined') {
                options[key] = (/** @type {?} */ (this.defaults))[key];
            }
        });
        options.time_24hr = options.time24hr;
        this.instance = /** @type {?} */ (flatpickr(this.elm.nativeElement, options));
        this.setDisabledState(this.isDisabled);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.instance) {
            Object.keys(changes).forEach(inputKey => {
                this.instance.set(/** @type {?} */ (inputKey), (/** @type {?} */ (this))[inputKey]);
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.instance.destroy();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        let /** @type {?} */ convertedValue = value;
        if (this.convertModelValue && this.mode === 'range' && value) {
            convertedValue = [value.from, value.to];
        }
        if (this.instance) {
            this.instance.setDate(convertedValue);
        }
        else {
            // flatpickr hasn't been initialised yet, store the value for later use
            this.initialValue = convertedValue;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeFn = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedFn = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        if (this.instance) {
            if (this.isDisabled) {
                this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');
            }
            else {
                this.renderer.removeAttribute(this.instance._input, 'disabled');
            }
        }
    }
    /**
     * @return {?}
     */
    inputChanged() {
        const /** @type {?} */ value = this.elm.nativeElement.value;
        if (this.convertModelValue && typeof value === 'string') {
            switch (this.mode) {
                case 'multiple':
                    const /** @type {?} */ dates = value
                        .split('; ')
                        .map(str => this.instance.parseDate(str, this.instance.config.dateFormat, !this.instance.config.enableTime));
                    this.onChangeFn(dates);
                    break;
                case 'range':
                    const [from, to] = value
                        .split(this.instance.l10n.rangeSeparator)
                        .map(str => this.instance.parseDate(str, this.instance.config.dateFormat, !this.instance.config.enableTime));
                    this.onChangeFn({ from, to });
                    break;
                case 'single':
                default:
                    this.onChangeFn(this.instance.parseDate(value, this.instance.config.dateFormat, !this.instance.config.enableTime));
            }
        }
        else {
            this.onChangeFn(value);
        }
    }
}
FlatpickrDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mwlFlatpickr]',
                providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],
                host: {
                    // tslint:disable-line use-host-property-decorator
                    '(blur)': 'onTouchedFn()'
                }
            },] },
];
/** @nocollapse */
FlatpickrDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FlatpickrDefaults },
    { type: Renderer2 }
];
FlatpickrDirective.propDecorators = {
    altFormat: [{ type: Input }],
    altInput: [{ type: Input }],
    altInputClass: [{ type: Input }],
    allowInput: [{ type: Input }],
    appendTo: [{ type: Input }],
    ariaDateFormat: [{ type: Input }],
    clickOpens: [{ type: Input }],
    dateFormat: [{ type: Input }],
    defaultHour: [{ type: Input }],
    defaultMinute: [{ type: Input }],
    disable: [{ type: Input }],
    disableMobile: [{ type: Input }],
    enable: [{ type: Input }],
    enableTime: [{ type: Input }],
    enableSeconds: [{ type: Input }],
    formatDate: [{ type: Input }],
    hourIncrement: [{ type: Input }],
    inline: [{ type: Input }],
    maxDate: [{ type: Input }],
    minDate: [{ type: Input }],
    minuteIncrement: [{ type: Input }],
    mode: [{ type: Input }],
    nextArrow: [{ type: Input }],
    noCalendar: [{ type: Input }],
    now: [{ type: Input }],
    parseDate: [{ type: Input }],
    prevArrow: [{ type: Input }],
    shorthandCurrentMonth: [{ type: Input }],
    static: [{ type: Input }],
    time24hr: [{ type: Input }],
    weekNumbers: [{ type: Input }],
    getWeek: [{ type: Input }],
    wrap: [{ type: Input }],
    plugins: [{ type: Input }],
    locale: [{ type: Input }],
    convertModelValue: [{ type: Input }],
    flatpickrReady: [{ type: Output }],
    flatpickrChange: [{ type: Output }],
    flatpickrValueUpdate: [{ type: Output }],
    flatpickrOpen: [{ type: Output }],
    flatpickrClose: [{ type: Output }],
    flatpickrMonthChange: [{ type: Output }],
    flatpickrYearChange: [{ type: Output }],
    flatpickrDayCreate: [{ type: Output }],
    inputChanged: [{ type: HostListener, args: ['input',] }]
};
function FlatpickrDirective_tsickle_Closure_declarations() {
    /**
     * Exactly the same as date format, but for the altInput field.
     * @type {?}
     */
    FlatpickrDirective.prototype.altFormat;
    /**
     * 	Show the user a readable date (as per altFormat), but return something totally different to the server.
     * @type {?}
     */
    FlatpickrDirective.prototype.altInput;
    /**
     * This class will be added to the input element created by the altInput option.
     * Note that `altInput` already inherits classes from the original input.
     * @type {?}
     */
    FlatpickrDirective.prototype.altInputClass;
    /**
     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.
     * @type {?}
     */
    FlatpickrDirective.prototype.allowInput;
    /**
     * Instead of `body`, appends the calendar to the specified node instead.
     * @type {?}
     */
    FlatpickrDirective.prototype.appendTo;
    /**
     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.
     * @type {?}
     */
    FlatpickrDirective.prototype.ariaDateFormat;
    /**
     * Whether clicking on the input should open the picker.
     * You could disable this if you wish to open the calendar manually `with.open()`.
     * @type {?}
     */
    FlatpickrDirective.prototype.clickOpens;
    /**
     * A string of characters which are used to define how the date will be displayed in the input box.
     * The supported characters are defined in the table below.
     * @type {?}
     */
    FlatpickrDirective.prototype.dateFormat;
    /**
     * Initial value of the hour element.
     * @type {?}
     */
    FlatpickrDirective.prototype.defaultHour;
    /**
     * Initial value of the minute element.
     * @type {?}
     */
    FlatpickrDirective.prototype.defaultMinute;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-specific-dates">disabling dates</a>.
     * @type {?}
     */
    FlatpickrDirective.prototype.disable;
    /**
     * Set disableMobile to true to always use the non-native picker.
     * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.
     * @type {?}
     */
    FlatpickrDirective.prototype.disableMobile;
    /**
     * See <a href="https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few">enabling dates</a>.
     * @type {?}
     */
    FlatpickrDirective.prototype.enable;
    /**
     * Enables time picker.
     * @type {?}
     */
    FlatpickrDirective.prototype.enableTime;
    /**
     * Enables seconds in the time picker.
     * @type {?}
     */
    FlatpickrDirective.prototype.enableSeconds;
    /**
     * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.
     * @type {?}
     */
    FlatpickrDirective.prototype.formatDate;
    /**
     * Adjusts the step for the hour input (incl. scrolling).
     * @type {?}
     */
    FlatpickrDirective.prototype.hourIncrement;
    /**
     * Displays the calendar inline.
     * @type {?}
     */
    FlatpickrDirective.prototype.inline;
    /**
     * The maximum date that a user can pick to (inclusive).
     * @type {?}
     */
    FlatpickrDirective.prototype.maxDate;
    /**
     * The minimum date that a user can start picking from (inclusive).
     * @type {?}
     */
    FlatpickrDirective.prototype.minDate;
    /**
     * Adjusts the step for the minute input (incl. scrolling).
     * @type {?}
     */
    FlatpickrDirective.prototype.minuteIncrement;
    /**
     * Select a single date, multiple dates or a date range.
     * @type {?}
     */
    FlatpickrDirective.prototype.mode;
    /**
     * HTML for the arrow icon, used to switch months.
     * @type {?}
     */
    FlatpickrDirective.prototype.nextArrow;
    /**
     * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.
     * @type {?}
     */
    FlatpickrDirective.prototype.noCalendar;
    /**
     * Provide a date for 'today', which will be used instead of "new Date()"
     * @type {?}
     */
    FlatpickrDirective.prototype.now;
    /**
     * Function that expects a date string and must return a Date object.
     * @type {?}
     */
    FlatpickrDirective.prototype.parseDate;
    /**
     * HTML for the left arrow icon.
     * @type {?}
     */
    FlatpickrDirective.prototype.prevArrow;
    /**
     * Show the month using the shorthand version (ie, Sep instead of September).
     * @type {?}
     */
    FlatpickrDirective.prototype.shorthandCurrentMonth;
    /**
     * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).
     * @type {?}
     */
    FlatpickrDirective.prototype.static;
    /**
     * Displays time picker in 24 hour mode without AM/PM selection when enabled.
     * @type {?}
     */
    FlatpickrDirective.prototype.time24hr;
    /**
     * Enables display of week numbers in calendar.
     * @type {?}
     */
    FlatpickrDirective.prototype.weekNumbers;
    /**
     * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.
     * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.
     * @type {?}
     */
    FlatpickrDirective.prototype.getWeek;
    /**
     * Custom elements and input groups.
     * @type {?}
     */
    FlatpickrDirective.prototype.wrap;
    /**
     * Array of plugin instances to use.
     * @type {?}
     */
    FlatpickrDirective.prototype.plugins;
    /**
     * The locale object or string to use for the locale.
     * @type {?}
     */
    FlatpickrDirective.prototype.locale;
    /**
     * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`
     * @type {?}
     */
    FlatpickrDirective.prototype.convertModelValue;
    /**
     * Gets triggered once the calendar is in a ready state
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrReady;
    /**
     * Gets triggered when the user selects a date, or changes the time on a selected date.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrChange;
    /**
     * Gets triggered when the input value is updated with a new date string.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrValueUpdate;
    /**
     * Gets triggered when the calendar is opened.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrOpen;
    /**
     * Gets triggered when the calendar is closed.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrClose;
    /**
     * Gets triggered when the month is changed, either by the user or programmatically.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrMonthChange;
    /**
     * Gets triggered when the year is changed, either by the user or programmatically.
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrYearChange;
    /**
     * Take full control of every date cell with this output
     * @type {?}
     */
    FlatpickrDirective.prototype.flatpickrDayCreate;
    /** @type {?} */
    FlatpickrDirective.prototype.instance;
    /** @type {?} */
    FlatpickrDirective.prototype.isDisabled;
    /** @type {?} */
    FlatpickrDirective.prototype.initialValue;
    /** @type {?} */
    FlatpickrDirective.prototype.onChangeFn;
    /** @type {?} */
    FlatpickrDirective.prototype.onTouchedFn;
    /** @type {?} */
    FlatpickrDirective.prototype.elm;
    /** @type {?} */
    FlatpickrDirective.prototype.defaults;
    /** @type {?} */
    FlatpickrDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,