{"version":3,"file":"angularx-flatpickr.js.map","sources":["ng://angularx-flatpickr/flatpickr-defaults.service.ts","ng://angularx-flatpickr/flatpickr.directive.ts","ng://angularx-flatpickr/flatpickr.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport type DisableEnableDate =\n  | string\n  | Date\n  | { from: Date | string; to: Date | string }\n  | ((date: Date) => boolean);\n\n// tslint:disable no-inferrable-types\n\nexport interface FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat?: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput?: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass?: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput?: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo?: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens?: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat?: string;\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable?: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile?: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable?: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime?: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds?: boolean;\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string;\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement?: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline?: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate?: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate?: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement?: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode?: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow?: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar?: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate?: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow?: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth?: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static?: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr?: boolean;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc?: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers?: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek?: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap?: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins?: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale?: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue?: boolean;\n}\n\n@Injectable()\nexport class FlatpickrDefaults implements FlatpickrDefaultsInterface {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  altFormat: string = 'F j, Y';\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  altInput: boolean = false;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  altInputClass: string = '';\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  allowInput: boolean = false;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  appendTo: HTMLElement = undefined;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  ariaDateFormat?: string = 'F j, Y';\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  clickOpens: boolean = true;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  dateFormat: string = 'Y-m-d';\n\n  /**\n   * Initial value of the hour element.\n   */\n  defaultHour?: number = 12;\n\n  /**\n   * Initial value of the minute element.\n   */\n  defaultMinute?: number = 0;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  disable: DisableEnableDate[] = [];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  disableMobile: boolean = false;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  enable: DisableEnableDate[] = [];\n\n  /**\n   * Enables time picker.\n   */\n  enableTime: boolean = false;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  enableSeconds: boolean = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  formatDate?: (value: any) => string = undefined;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  hourIncrement: number = 1;\n\n  /**\n   * Displays the calendar inline.\n   */\n  inline: boolean = false;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  maxDate: string | Date = undefined;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  minDate: string | Date = undefined;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  minuteIncrement: number = 5;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  mode: 'single' | 'multiple' | 'range' = 'single';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  nextArrow: string = '>';\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  noCalendar: boolean = false;\n\n  /**\n   * Default now to the current date\n   */\n  now: Date | string | number = new Date();\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  prevArrow: string = '<';\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  shorthandCurrentMonth: boolean = false;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  static: boolean = false;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  time24hr: boolean = false;\n\n  /**\n   * When true, dates will parsed, formatted, and displayed in UTC.\n   * It's recommended that date strings contain the timezone, but not necessary.\n   */\n  utc: boolean = false;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  weekNumbers: boolean = false;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  wrap: boolean = false;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  plugins: any[] = [];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  convertModelValue: boolean = false;\n}\n","import {\n  Directive,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  forwardRef,\n  HostListener,\n  Renderer2\n} from '@angular/core';\nimport {\n  FlatpickrDefaults,\n  DisableEnableDate\n} from './flatpickr-defaults.service';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n\nexport interface FlatPickrOutputOptions {\n  selectedDates: Date[];\n  dateString: string;\n  instance: any;\n}\n\nexport interface FlatPickrDayCreateOutputOptions\n  extends FlatPickrOutputOptions {\n  dayElement: HTMLElement;\n}\n\nexport const FLATPICKR_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => FlatpickrDirective), //tslint:disable-line\n  multi: true\n};\n\n@Directive({\n  selector: '[mwlFlatpickr]',\n  providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n  host: {\n    // tslint:disable-line use-host-property-decorator\n    '(blur)': 'onTouchedFn()'\n  }\n})\nexport class FlatpickrDirective\n  implements AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  @Input() altFormat: string;\n\n  /**\n   * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  @Input() altInput: boolean;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that `altInput` already inherits classes from the original input.\n   */\n  @Input() altInputClass: string;\n\n  /**\n   * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n   */\n  @Input() allowInput: boolean;\n\n  /**\n   * Instead of `body`, appends the calendar to the specified node instead.\n   */\n  @Input() appendTo: HTMLElement;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n   */\n  @Input() ariaDateFormat?: string;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * You could disable this if you wish to open the calendar manually `with.open()`.\n   */\n  @Input() clickOpens: boolean;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  @Input() dateFormat: string;\n\n  /**\n   * Initial value of the hour element.\n   */\n  @Input() defaultHour?: number;\n  /**\n   * Initial value of the minute element.\n   */\n  @Input() defaultMinute?: number;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n   */\n  @Input() disable: DisableEnableDate[];\n\n  /**\n   * Set disableMobile to true to always use the non-native picker.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  @Input() disableMobile: boolean;\n\n  /**\n   * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\">enabling dates</a>.\n   */\n  @Input() enable: DisableEnableDate[];\n\n  /**\n   * Enables time picker.\n   */\n  @Input() enableTime: boolean;\n\n  /**\n   * Enables seconds in the time picker.\n   */\n  @Input() enableSeconds: boolean;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  @Input() formatDate?: (value: any) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling).\n   */\n  @Input() hourIncrement: number;\n\n  /**\n   * Displays the calendar inline.\n   */\n  @Input() inline: boolean;\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  @Input() maxDate: string | Date;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Input() minDate: string | Date;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling).\n   */\n  @Input() minuteIncrement: number;\n\n  /**\n   * Select a single date, multiple dates or a date range.\n   */\n  @Input() mode: 'single' | 'multiple' | 'range';\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  @Input() nextArrow: string;\n\n  /**\n   * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n   */\n  @Input() noCalendar: boolean;\n\n  /**\n   * Provide a date for 'today', which will be used instead of \"new Date()\"\n   */\n  @Input() now?: Date | string | number;\n\n  /**\n   * Function that expects a date string and must return a Date object.\n   */\n  @Input() parseDate: (str: string) => Date;\n\n  /**\n   * HTML for the left arrow icon.\n   */\n  @Input() prevArrow: string;\n\n  /**\n   * Show the month using the shorthand version (ie, Sep instead of September).\n   */\n  @Input() shorthandCurrentMonth: boolean;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n   */\n  @Input() static: boolean;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  @Input() time24hr: boolean;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  @Input() weekNumbers: boolean;\n\n  /**\n   * You may override the function that extracts the week numbers from a Date by supplying a getWeek function.\n   * It takes in a date as a parameter and should return a corresponding string that you want to appear left of every week.\n   */\n  @Input() getWeek: (date: Date) => string;\n\n  /**\n   * Custom elements and input groups.\n   */\n  @Input() wrap: boolean;\n\n  /**\n   * Array of plugin instances to use.\n   */\n  @Input() plugins: any[];\n\n  /**\n   * The locale object or string to use for the locale.\n   */\n  @Input() locale: object | string;\n\n  /**\n   * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n   */\n  @Input() convertModelValue: boolean;\n\n  /**\n   * Gets triggered once the calendar is in a ready state\n   */\n  @Output()\n  flatpickrReady: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the user selects a date, or changes the time on a selected date.\n   */\n  @Output()\n  flatpickrChange: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the input value is updated with a new date string.\n   */\n  @Output()\n  flatpickrValueUpdate: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is opened.\n   */\n  @Output()\n  flatpickrOpen: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the calendar is closed.\n   */\n  @Output()\n  flatpickrClose: EventEmitter<FlatPickrOutputOptions> = new EventEmitter();\n\n  /**\n   * Gets triggered when the month is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrMonthChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Gets triggered when the year is changed, either by the user or programmatically.\n   */\n  @Output()\n  flatpickrYearChange: EventEmitter<\n    FlatPickrOutputOptions\n  > = new EventEmitter();\n\n  /**\n   * Take full control of every date cell with this output\n   */\n  @Output()\n  flatpickrDayCreate: EventEmitter<\n    FlatPickrDayCreateOutputOptions\n  > = new EventEmitter();\n\n  private instance: flatpickr.Instance;\n  private isDisabled = false;\n  private initialValue: any;\n\n  onChangeFn: (value: any) => void = () => {}; // tslint:disable-line\n\n  onTouchedFn = () => {};\n\n  constructor(\n    private elm: ElementRef,\n    private defaults: FlatpickrDefaults,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    const options: any = {\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      allowInput: this.allowInput,\n      appendTo: this.appendTo,\n      ariaDateFormat: this.ariaDateFormat,\n      clickOpens: this.clickOpens,\n      dateFormat: this.dateFormat,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableTime: this.enableTime,\n      enableSeconds: this.enableSeconds,\n      formatDate: this.formatDate,\n      hourIncrement: this.hourIncrement,\n      defaultDate: this.initialValue,\n      inline: this.inline,\n      maxDate: this.maxDate,\n      minDate: this.minDate,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      nextArrow: this.nextArrow,\n      noCalendar: this.noCalendar,\n      now: this.now,\n      parseDate: this.parseDate,\n      prevArrow: this.prevArrow,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      static: this.static,\n      time24hr: this.time24hr,\n      weekNumbers: this.weekNumbers,\n      getWeek: this.getWeek,\n      wrap: this.wrap,\n      plugins: this.plugins,\n      onChange: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrChange.emit({ selectedDates, dateString, instance });\n      },\n      onOpen: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrOpen.emit({ selectedDates, dateString, instance });\n      },\n      onClose: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrClose.emit({ selectedDates, dateString, instance });\n      },\n      onMonthChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });\n      },\n      onYearChange: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrYearChange.emit({ selectedDates, dateString, instance });\n      },\n      onReady: (selectedDates: Date[], dateString: string, instance: any) => {\n        this.flatpickrReady.emit({ selectedDates, dateString, instance });\n      },\n      onValueUpdate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any\n      ) => {\n        this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });\n      },\n      onDayCreate: (\n        selectedDates: Date[],\n        dateString: string,\n        instance: any,\n        dayElement: HTMLElement\n      ) => {\n        this.flatpickrDayCreate.emit({\n          selectedDates,\n          dateString,\n          instance,\n          dayElement\n        });\n      }\n    };\n    if (this.locale) {\n      // workaround warning from flatpickr\n      options.locale = this.locale;\n    }\n    Object.keys(options).forEach(key => {\n      if (typeof options[key] === 'undefined') {\n        options[key] = (this.defaults as any)[key];\n      }\n    });\n    options.time_24hr = options.time24hr;\n    this.instance = flatpickr(\n      this.elm.nativeElement,\n      options\n    ) as flatpickr.Instance;\n    this.setDisabledState(this.isDisabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance) {\n      Object.keys(changes).forEach(inputKey => {\n        this.instance.set(inputKey as any, (this as any)[inputKey]);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.instance.destroy();\n  }\n\n  writeValue(value: any): void {\n    let convertedValue: any = value;\n    if (this.convertModelValue && this.mode === 'range' && value) {\n      convertedValue = [value.from, value.to];\n    }\n\n    if (this.instance) {\n      this.instance.setDate(convertedValue);\n    } else {\n      // flatpickr hasn't been initialised yet, store the value for later use\n      this.initialValue = convertedValue;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeFn = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouchedFn = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n    if (this.instance) {\n      if (this.isDisabled) {\n        this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n      } else {\n        this.renderer.removeAttribute(this.instance._input, 'disabled');\n      }\n    }\n  }\n\n  @HostListener('input')\n  inputChanged(): void {\n    const value: string = this.elm.nativeElement.value;\n    if (this.convertModelValue && typeof value === 'string') {\n      switch (this.mode) {\n        case 'multiple':\n          const dates: Date[] = value\n            .split('; ')\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn(dates);\n          break;\n\n        case 'range':\n          const [from, to] = value\n            .split(this.instance.l10n.rangeSeparator)\n            .map(str =>\n              this.instance.parseDate(\n                str,\n                this.instance.config.dateFormat,\n                !this.instance.config.enableTime\n              )\n            );\n          this.onChangeFn({ from, to });\n          break;\n\n        case 'single':\n        default:\n          this.onChangeFn(\n            this.instance.parseDate(\n              value,\n              this.instance.config.dateFormat,\n              !this.instance.config.enableTime\n            )\n          );\n      }\n    } else {\n      this.onChangeFn(value);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  InjectionToken,\n  Provider\n} from '@angular/core';\nimport { FlatpickrDirective } from './flatpickr.directive';\nimport {\n  FlatpickrDefaults,\n  FlatpickrDefaultsInterface\n} from './flatpickr-defaults.service';\n\nexport const USER_DEFAULTS = new InjectionToken('flatpickr defaults');\n\nexport function defaultsFactory(\n  userDefaults: FlatpickrDefaultsInterface\n): FlatpickrDefaults {\n  const defaults: FlatpickrDefaults = new FlatpickrDefaults();\n  Object.assign(defaults, userDefaults);\n  return defaults;\n}\n\n@NgModule({\n  declarations: [FlatpickrDirective],\n  exports: [FlatpickrDirective]\n})\nexport class FlatpickrModule {\n  static forRoot(\n    userDefaults: FlatpickrDefaultsInterface = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: FlatpickrModule,\n      providers: [\n        {\n          provide: USER_DEFAULTS,\n          useValue: userDefaults\n        },\n        {\n          provide: FlatpickrDefaults,\n          useFactory: defaultsFactory,\n          deps: [USER_DEFAULTS]\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
